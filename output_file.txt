main.rs:
use anyhow::Result;
use regex_rustler::parser::parse_args;
use regex_rustler::process_file;
use std::io::Write;
use std::io::{self, BufRead};

fn main() -> Result<()> {
    let config = parse_args()?;

    if config.real_time {
        real_time_regex_testing()?;
    } else {
        // Handle the case when regex_pattern is None
        if let Some(regex_pattern) = &config.regex_pattern {
            process_file(&config.file_path, regex_pattern)?;
        } else {
            return Err(anyhow::anyhow!("Regex pattern is required"));
        }
    }

    Ok(())
}

use crossterm::{
    event::{self, Event, KeyCode},
    execute,
    terminal::{self, EnterAlternateScreen, LeaveAlternateScreen},
};
use fancy_regex::Regex;
use std::fs;
use std::io::{self, Write};

fn real_time_regex_testing(file_path: &str) -> Result<()> {
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen)?;

    terminal::enable_raw_mode()?;

    let file_contents = fs::read_to_string(file_path)?;
    let mut regex_pattern = String::new();

    loop {
        if event::poll(std::time::Duration::from_millis(500))? {
            if let Event::Key(key_event) = event::read()? {
                match key_event.code {
                    KeyCode::Char(c) => regex_pattern.push(c),
                    KeyCode::Backspace => {
                        regex_pattern.pop();
                    }
                    KeyCode::Esc => break,
                    _ => (),
                }
            }
        }

        // Clear screen and print current regex pattern
        execute!(stdout, terminal::Clear(terminal::ClearType::All))?;
        writeln!(stdout, "Regex pattern: {}", regex_pattern)?;
        stdout.flush()?;

        // Apply regex to the text and display it
        if let Ok(regex) = Regex::new(&regex_pattern) {
            for line in file_contents.lines() {
                let processed_line =
                    regex_rustler::processor::process_regex(line, &regex, &mut false)?;
                writeln!(stdout, "{}", processed_line)?;
            }
        }

        stdout.flush()?;
    }

    terminal::disable_raw_mode()?;
    execute!(stdout, LeaveAlternateScreen)?;
    Ok(())
}


lib.rs:
// In lib.rs

use crate::processor::process_regex;
use anyhow::Result;
use fancy_regex::Regex;
use std::fs::File;
use std::io::{self, BufRead, BufReader};
pub mod errors;
pub mod parser;
pub mod processor;
use errors::AppError;

pub fn process_file(file_path: &str, regex_pattern: &str) -> Result<()> {
    let file = File::open(file_path).map_err(AppError::FileReadError)?;
    let reader = BufReader::new(file);
    let regex = Regex::new(regex_pattern).map_err(AppError::RegexError)?;

    let mut toggle = false;

    for line in reader.lines() {
        let line = line.map_err(AppError::FileReadError)?;
        let processed_line = process_regex(&line, &regex, &mut toggle)?;
        println!("{}", processed_line);
    }

    Ok(())
}


processor.rs:
// In processor.rs
use crate::errors::AppError;
use anyhow::Result;
use colored::*;
use fancy_regex::Regex;

pub fn process_regex(line: &str, regex: &Regex, toggle: &mut bool) -> Result<String> {
    let mut new_line = String::new();
    let mut last = 0;

    // Iterate over the matches and handle each Result item
    let matches = regex.find_iter(line);
    for match_result in matches {
        let mat = match_result.map_err(AppError::RegexError)?;

        // Process each match
        new_line.push_str(&line[last..mat.start()]);
        let matched = if *toggle {
            mat.as_str().red().to_string()
        } else {
            mat.as_str().blue().to_string()
        };
        *toggle = !*toggle;
        new_line.push_str(&matched);
        last = mat.end();
    }

    new_line.push_str(&line[last..]);
    Ok(new_line)
}


config.rs:


errors.rs:
// errors.rs
use std::io;
use thiserror::Error;

#[derive(Error, Debug)]
pub enum AppError {
    #[error("Error reading file: {0}")]
    FileReadError(#[from] io::Error),

    #[error("Error compiling regex: {0}")]
    RegexError(#[from] fancy_regex::Error),
}


parser.rs:
// src/parser.rs
use anyhow::{anyhow, Result};
use clap::{command, Arg, ArgAction};

pub struct Config {
    pub file_path: String,
    pub regex_pattern: Option<String>,
    pub real_time: bool,
}

pub fn parse_args() -> Result<Config> {
    let matches = command!()
        .author("Eyal Lampel")
        .about("Searches (and colors) for a regex pattern in a text file")
        .arg(
            Arg::new("file-path")
                .short('p')
                .long("path")
                .aliases(&["fpath", "path", "text-file", "file"])
                .value_name("FILE")
                .required(true)
                .help("Path to the Text file to search for example: /home/user/text.txt"),
        )
        .arg(
            Arg::new("regex-pattern")
                .short('r')
                .long("regex")
                .value_name("REGEX")
                .required_unless_present("real-time-regex-testing")
                .help("Regex pattern to match for example: [a-z]"),
        )
        .arg(
            Arg::new("real-time-regex-testing")
                .short('t')
                .long("realTime")
                .aliases(&[
                    "rt",
                    "real-time",
                    "realtime",
                    "realTime",
                    "realTimeRegexTesting",
                ])
                .action(ArgAction::SetTrue)
                .help("Enter interactive mode for real-time regex testing"),
        )
        .get_matches();

    let file_path = matches
        .get_one::<String>("file-path")
        .ok_or_else(|| anyhow!("File path is required"))?
        .clone();
    let regex_pattern = matches
        .get_one::<String>("regex-pattern")
        .map(|s| s.to_string());
    let real_time = matches.get_flag("real-time-regex-testing");

    Ok(Config {
        file_path,
        regex_pattern,
        real_time,
    })
}


